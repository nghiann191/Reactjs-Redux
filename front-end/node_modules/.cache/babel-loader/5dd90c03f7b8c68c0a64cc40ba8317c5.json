{"ast":null,"code":"import { randomNormal } from 'd3-random';\nvar random = randomNormal(0, 0.2);\nvar sqrt3 = Math.sqrt(3);\n\nfunction range(length) {\n  return new Array(length).fill(1);\n}\n\nexport function genPointsRange(length, _ref) {\n  var offsetX = _ref[0],\n      offsetY = _ref[1],\n      index = _ref[2];\n  return range(length).map(function () {\n    return [random() + offsetX, random() + offsetY, index];\n  });\n}\nexport default function genPoints(count) {\n  if (count === void 0) {\n    count = 300;\n  }\n\n  return [].concat(genPointsRange(count, [sqrt3, 1, 0]), genPointsRange(count, [-sqrt3, 1, 1]), genPointsRange(count, [0, -1, 2]));\n}","map":{"version":3,"sources":["/home/nghia/react-training2/front-end/node_modules/@vx/mock-data/esm/generators/genRandomNormalPoints.js"],"names":["randomNormal","random","sqrt3","Math","sqrt","range","length","Array","fill","genPointsRange","_ref","offsetX","offsetY","index","map","genPoints","count","concat"],"mappings":"AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,IAAIC,MAAM,GAAGD,YAAY,CAAC,CAAD,EAAI,GAAJ,CAAzB;AACA,IAAIE,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAU,CAAV,CAAZ;;AAEA,SAASC,KAAT,CAAeC,MAAf,EAAuB;AACrB,SAAO,IAAIC,KAAJ,CAAUD,MAAV,EAAkBE,IAAlB,CAAuB,CAAvB,CAAP;AACD;;AAED,OAAO,SAASC,cAAT,CAAwBH,MAAxB,EAAgCI,IAAhC,EAAsC;AAC3C,MAAIC,OAAO,GAAGD,IAAI,CAAC,CAAD,CAAlB;AAAA,MACIE,OAAO,GAAGF,IAAI,CAAC,CAAD,CADlB;AAAA,MAEIG,KAAK,GAAGH,IAAI,CAAC,CAAD,CAFhB;AAGA,SAAOL,KAAK,CAACC,MAAD,CAAL,CAAcQ,GAAd,CAAkB,YAAY;AACnC,WAAO,CAACb,MAAM,KAAKU,OAAZ,EAAqBV,MAAM,KAAKW,OAAhC,EAAyCC,KAAzC,CAAP;AACD,GAFM,CAAP;AAGD;AACD,eAAe,SAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACvC,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,IAAAA,KAAK,GAAG,GAAR;AACD;;AAED,SAAO,GAAGC,MAAH,CAAUR,cAAc,CAACO,KAAD,EAAQ,CAACd,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAR,CAAxB,EAAgDO,cAAc,CAACO,KAAD,EAAQ,CAAC,CAACd,KAAF,EAAS,CAAT,EAAY,CAAZ,CAAR,CAA9D,EAAuFO,cAAc,CAACO,KAAD,EAAQ,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAR,CAArG,CAAP;AACD","sourcesContent":["import { randomNormal } from 'd3-random';\nvar random = randomNormal(0, 0.2);\nvar sqrt3 = Math.sqrt(3);\n\nfunction range(length) {\n  return new Array(length).fill(1);\n}\n\nexport function genPointsRange(length, _ref) {\n  var offsetX = _ref[0],\n      offsetY = _ref[1],\n      index = _ref[2];\n  return range(length).map(function () {\n    return [random() + offsetX, random() + offsetY, index];\n  });\n}\nexport default function genPoints(count) {\n  if (count === void 0) {\n    count = 300;\n  }\n\n  return [].concat(genPointsRange(count, [sqrt3, 1, 0]), genPointsRange(count, [-sqrt3, 1, 1]), genPointsRange(count, [0, -1, 2]));\n}"]},"metadata":{},"sourceType":"module"}