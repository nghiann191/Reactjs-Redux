{"ast":null,"code":"import _objectSpread from \"/home/nghia/react-training2/front-end/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/nghia/react-training2/front-end/src/components/HeatChart/HeatChart.js\";\nimport React from 'react';\nimport { Group } from '@vx/group';\nimport { genBins } from '@vx/mock-data';\nimport { scaleLinear } from '@vx/scale';\nimport { HeatmapCircle, HeatmapRect } from '@vx/heatmap';\nconst hot1 = '#77312f';\nconst hot2 = '#f33d15';\nconst cool1 = '#122549';\nconst cool2 = '#b4fbde';\nconst bg = '#28272c';\nconst data = genBins(16, 16); // utils\n\nconst max = (data, value = d => d) => Math.max(...data.map(value));\n\nconst min = (data, value = d => d) => Math.min(...data.map(value)); // accessors\n\n\nconst bins = d => d.bins;\n\nconst count = d => d.count;\n\nconst colorMax = max(data, d => max(bins(d), count));\nconst bucketSizeMax = max(data, d => bins(d).length); // scales\n\nconst xScale = scaleLinear({\n  domain: [0, data.length]\n});\nconst yScale = scaleLinear({\n  domain: [0, bucketSizeMax]\n});\nconst circleColorScale = scaleLinear({\n  range: [hot1, hot2],\n  domain: [0, colorMax]\n});\nconst rectColorScale = scaleLinear({\n  range: [cool1, cool2],\n  domain: [0, colorMax]\n});\nconst opacityScale = scaleLinear({\n  range: [0.1, 1],\n  domain: [0, colorMax]\n});\nexport default (({\n  width,\n  height,\n  separation = 20,\n  margin = {\n    top: 10,\n    left: 20,\n    right: 20,\n    bottom: 110\n  }\n}) => {\n  // bounds\n  let size = width;\n\n  if (size > margin.left + margin.right) {\n    size = width - margin.left - margin.right - separation;\n  }\n\n  const xMax = size / 2;\n  const yMax = height - margin.bottom - margin.top;\n  const binWidth = xMax / data.length;\n  const binHeight = yMax / bucketSizeMax;\n  const radius = min([binWidth, binHeight]) / 2;\n  xScale.range([0, xMax]);\n  yScale.range([yMax, 0]);\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height,\n    rx: 14,\n    fill: bg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Group, {\n    top: margin.top,\n    left: margin.left,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(HeatmapCircle, {\n    data: data,\n    xScale: xScale,\n    yScale: yScale,\n    colorScale: circleColorScale,\n    opacityScale: opacityScale,\n    radius: radius,\n    gap: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, heatmap => {\n    return heatmap.map(bins => {\n      return bins.map(bin => {\n        return React.createElement(\"circle\", {\n          key: `heatmap-circle-${bin.row}-${bin.column}`,\n          className: \"vx-heatmap-circle\",\n          cx: bin.cx,\n          cy: bin.cy,\n          r: bin.r,\n          fill: bin.color,\n          fillOpacity: bin.opacity,\n          onClick: event => {\n            const row = bin.row,\n                  column = bin.column;\n            alert(JSON.stringify(_objectSpread({\n              row,\n              column\n            }, bin.bin)));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        });\n      });\n    });\n  })), React.createElement(Group, {\n    top: margin.top,\n    left: xMax + margin.left + separation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(HeatmapRect, {\n    data: data,\n    xScale: xScale,\n    yScale: yScale,\n    colorScale: rectColorScale,\n    opacityScale: opacityScale,\n    binWidth: binWidth,\n    binHeight: binWidth,\n    gap: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, heatmap => {\n    return heatmap.map(bins => {\n      return bins.map(bin => {\n        return React.createElement(\"rect\", {\n          key: `heatmap-rect-${bin.row}-${bin.column}`,\n          className: \"vx-heatmap-rect\",\n          width: bin.width,\n          height: bin.height,\n          x: bin.x,\n          y: bin.y,\n          fill: bin.color,\n          fillOpacity: bin.opacity,\n          onClick: event => {\n            const row = bin.row,\n                  column = bin.column;\n            alert(JSON.stringify(_objectSpread({\n              row,\n              column\n            }, bin.bin)));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        });\n      });\n    });\n  })));\n});","map":{"version":3,"sources":["/home/nghia/react-training2/front-end/src/components/HeatChart/HeatChart.js"],"names":["React","Group","genBins","scaleLinear","HeatmapCircle","HeatmapRect","hot1","hot2","cool1","cool2","bg","data","max","value","d","Math","map","min","bins","count","colorMax","bucketSizeMax","length","xScale","domain","yScale","circleColorScale","range","rectColorScale","opacityScale","width","height","separation","margin","top","left","right","bottom","size","xMax","yMax","binWidth","binHeight","radius","heatmap","bin","row","column","cx","cy","r","color","opacity","event","alert","JSON","stringify","x","y"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Group } from '@vx/group';\nimport { genBins } from '@vx/mock-data';\nimport { scaleLinear } from '@vx/scale';\nimport { HeatmapCircle, HeatmapRect } from '@vx/heatmap';\n\nconst hot1 = '#77312f';\nconst hot2 = '#f33d15';\nconst cool1 = '#122549';\nconst cool2 = '#b4fbde';\nconst bg = '#28272c';\n\nconst data = genBins(16, 16);\n\n// utils\nconst max = (data, value = d => d) => Math.max(...data.map(value));\nconst min = (data, value = d => d) => Math.min(...data.map(value));\n\n// accessors\nconst bins = d => d.bins;\nconst count = d => d.count;\n\nconst colorMax = max(data, d => max(bins(d), count));\nconst bucketSizeMax = max(data, d => bins(d).length);\n\n// scales\nconst xScale = scaleLinear({\n  domain: [0, data.length]\n});\nconst yScale = scaleLinear({\n  domain: [0, bucketSizeMax]\n});\nconst circleColorScale = scaleLinear({\n  range: [hot1, hot2],\n  domain: [0, colorMax]\n});\nconst rectColorScale = scaleLinear({\n  range: [cool1, cool2],\n  domain: [0, colorMax]\n});\nconst opacityScale = scaleLinear({\n  range: [0.1, 1],\n  domain: [0, colorMax]\n});\n\nexport default ({\n  width,\n  height,\n  separation = 20,\n  margin = {\n    top: 10,\n    left: 20,\n    right: 20,\n    bottom: 110\n  }\n}) => {\n  // bounds\n  let size = width;\n  if (size > margin.left + margin.right) {\n    size = width - margin.left - margin.right - separation;\n  }\n\n  const xMax = size / 2;\n  const yMax = height - margin.bottom - margin.top;\n\n  const binWidth = xMax / data.length;\n  const binHeight = yMax / bucketSizeMax;\n  const radius = min([binWidth, binHeight]) / 2;\n\n  xScale.range([0, xMax]);\n  yScale.range([yMax, 0]);\n\n  return (\n    <svg width={width} height={height}>\n      <rect x={0} y={0} width={width} height={height} rx={14} fill={bg} />\n      <Group top={margin.top} left={margin.left}>\n        <HeatmapCircle\n          data={data}\n          xScale={xScale}\n          yScale={yScale}\n          colorScale={circleColorScale}\n          opacityScale={opacityScale}\n          radius={radius}\n          gap={2}\n        >\n          {heatmap => {\n            return heatmap.map(bins => {\n              return bins.map(bin => {\n                return (\n                  <circle\n                    key={`heatmap-circle-${bin.row}-${bin.column}`}\n                    className=\"vx-heatmap-circle\"\n                    cx={bin.cx}\n                    cy={bin.cy}\n                    r={bin.r}\n                    fill={bin.color}\n                    fillOpacity={bin.opacity}\n                    onClick={event => {\n                      const { row, column } = bin;\n                      alert(JSON.stringify({ row, column, ...bin.bin }));\n                    }}\n                  />\n                );\n              });\n            });\n          }}\n        </HeatmapCircle>\n      </Group>\n      <Group top={margin.top} left={xMax + margin.left + separation}>\n        <HeatmapRect\n          data={data}\n          xScale={xScale}\n          yScale={yScale}\n          colorScale={rectColorScale}\n          opacityScale={opacityScale}\n          binWidth={binWidth}\n          binHeight={binWidth}\n          gap={2}\n        >\n          {heatmap => {\n            return heatmap.map(bins => {\n              return bins.map(bin => {\n                return (\n                  <rect\n                    key={`heatmap-rect-${bin.row}-${bin.column}`}\n                    className=\"vx-heatmap-rect\"\n                    width={bin.width}\n                    height={bin.height}\n                    x={bin.x}\n                    y={bin.y}\n                    fill={bin.color}\n                    fillOpacity={bin.opacity}\n                    onClick={event => {\n                      const { row, column } = bin;\n                      alert(JSON.stringify({ row, column, ...bin.bin }));\n                    }}\n                  />\n                );\n              });\n            });\n          }}\n        </HeatmapRect>\n      </Group>\n    </svg>\n  );\n};"]},"metadata":{},"sourceType":"module"}