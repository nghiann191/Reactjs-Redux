import React from 'react';
import { SeriesPoint } from 'd3-shape';
import { StackProps, NumAccessor as StackNumAccessor } from './Stack';
import { ScaleType, StackKey, BarStack } from '../types';
export declare type NumAccessor<Datum> = StackNumAccessor<Datum>;
export declare type BarStackProps<Datum> = Pick<StackProps<Datum>, 'data' | 'className' | 'top' | 'left' | 'keys' | 'order' | 'offset' | 'value'> & {
    /** Returns the value mapped to the x of a bar */
    x: (d: Datum) => number;
    /** Returns the value mapped to the y0 of a bar. */
    y0?: (d: SeriesPoint<Datum>) => number;
    /** Returns the value mapped to the y1 of a bar. */
    y1?: (d: SeriesPoint<Datum>) => number;
    /** @vx/scale or d3-scale that takes an x value and maps it to an x axis position. */
    xScale: ScaleType;
    /** @vx/scale or d3-scale that takes a y value and maps it to an y axis position. */
    yScale: ScaleType;
    /** Returns the desired color for a bar with a given key and index. */
    color: (key: StackKey, index: number) => string;
    /** Override render function which is passed the configured arc generator as input. */
    children?: (stacks: BarStack<Datum>[]) => React.ReactNode;
};
export default function BarStackComponent<Datum>({ data, className, top, left, x, y0, y1, xScale, yScale, color, keys, value, order, offset, children, ...restProps }: BarStackProps<Datum> & Omit<React.SVGProps<SVGRectElement>, keyof BarStackProps<Datum>>): JSX.Element;
//# sourceMappingURL=BarStack.d.ts.map