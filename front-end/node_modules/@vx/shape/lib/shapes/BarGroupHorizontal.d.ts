import React from 'react';
import { BarGroupProps } from './BarGroup';
import { ScaleType, BarGroupHorizontal, $TSFIXME } from '../types';
export declare type BarGroupHorizontalProps<Datum> = Pick<BarGroupProps<Datum>, 'data' | 'className' | 'top' | 'left' | 'keys' | 'color'> & {
    /** Returns the value (Datum[key]) mapped to the x of a bar */
    x?: (barValue: number) => number;
    /** Returns the value mapped to the y0 (position of group) of a bar */
    y0: (d: Datum) => $TSFIXME;
    /** @vx/scale or d3-scale that takes a key value (Datum[key]) and maps it to an x axis position (width of bar). */
    xScale: ScaleType;
    /** @vx/scale or d3-scale that takes a y0 value (position of group) and maps it to a y axis position. */
    y0Scale: ScaleType;
    /** @vx/scale or d3-scale that takes a group key and maps it to an y axis position (within a group). */
    y1Scale: ScaleType;
    /** Total width of the x-axis. */
    width: number;
    /** Override render function which is passed the computed Ba/rGroups. */
    children?: (barGroups: BarGroupHorizontal[]) => React.ReactNode;
};
export default function BarGroupHorizontalComponent<Datum extends {
    [key: string]: $TSFIXME;
}>({ data, className, top, left, x, y0, y0Scale, y1Scale, xScale, color, keys, width, children, ...restProps }: BarGroupHorizontalProps<Datum> & Omit<React.SVGProps<SVGRectElement>, keyof BarGroupHorizontalProps<Datum>>): JSX.Element;
//# sourceMappingURL=BarGroupHorizontal.d.ts.map